// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    first_name,
    last_name,
    email_id,
    password_hash,
    password_salt,
    auth_provider,
    is_active,
    preferred_currency
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
) RETURNING id, first_name, last_name, email_id, phone, username, profile_picture_url, password_hash, password_salt, auth_provider, last_login_at, is_active, preferred_currency, created_at, updated_at
`

type CreateUserParams struct {
	FirstName         string `json:"first_name"`
	LastName          string `json:"last_name"`
	EmailID           string `json:"email_id"`
	PasswordHash      string `json:"password_hash"`
	PasswordSalt      string `json:"password_salt"`
	AuthProvider      string `json:"auth_provider"`
	IsActive          bool   `json:"is_active"`
	PreferredCurrency string `json:"preferred_currency"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.EmailID,
		arg.PasswordHash,
		arg.PasswordSalt,
		arg.AuthProvider,
		arg.IsActive,
		arg.PreferredCurrency,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.EmailID,
		&i.Phone,
		&i.Username,
		&i.ProfilePictureUrl,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.AuthProvider,
		&i.LastLoginAt,
		&i.IsActive,
		&i.PreferredCurrency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
